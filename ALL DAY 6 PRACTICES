https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%202&url=worlds%2Ftutorial_en%2Fhurdle2.json
Hurdle 1:


Hurdle 2:
https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%202&url=worlds%2Ftutorial_en%2Fhurdle2.json

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
while not at_goal():
   if wall_in_front():
    jump()
   else:
    move()
while at_goal():
    done() 


Hurdle 3:

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
while not at_goal():
   if wall_in_front():
    jump()
   else:
    move()
while at_goal():
    done() 


Hurdle 4:

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    while wall_on_right():
        if wall_in_front():
            jump()
        else:
            move()
        
    turn_right()
    move()
    turn_right()
    
    while front_is_clear():
        move()
    turn_left()
        
while at_goal():
    done()    
    
while not at_goal():
   if wall_in_front():
    jump()
   else:
    move()



PROJECT MAZE:

def turn_right():
    turn_left()
    turn_left()
    turn_left()

#To prevent infinity loop
while front_is_clear():
    move()
turn_left()
    
while not at_goal():
    if right_is_clear():
        turn_right()
        move()
   
    elif front_is_clear():
        move()
        
    else:
        turn_left()
